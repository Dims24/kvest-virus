import os
import random

import telebot
from datetime import datetime, timedelta
import time
from telebot import types
import json
import re

from telebot.types import InputFile

import keyboard.main_keyboard as keyboard
import database.db_aa as db
from Export.export import export_data

bot = telebot.TeleBot('6359049037:AAHP4syCStXg6ZMnL0hF7MmrB83jxc6qcso')

correct_answers = ['_–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!_', '_–ü–æ–ø–∞–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ —Ü–µ–ª—å!_', '_–ó–¥–æ—Ä–æ–≤–æ, –º–æ–ª–æ–¥–µ—Ü!_',
                   '_–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!_']

incorrect = ['_–•–º.. –¥–∞—é –µ—â—ë —à–∞–Ω—Å_ üòä',
             '_–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ—Ä–∞–∑–º—ã—Å–ª–∏—Ç—å –µ—â—ë_',
             '_–ù—É—É—É—É... –Ω–µ —Ç–æ, —É–≤—ã_',
             '_–¢–∞–∫-—Ç–∞–∫-—Ç–∞–∫, –ø–æ—á—Ç–∏! –ù–æ –Ω–µ—Ç!_',
             '_–î–∞–≤–∞–π-–¥–∞–≤–∞–π! –Ø –≤ —Ç–µ–±—è –≤–µ—Ä—é!_',
             ]


def timeppp(message):
    newTimeString = datetime.fromtimestamp(message).strftime('%H:%M:%S - %d %b %Z')
    print(newTimeString)


def text_check(text):
    import re
    regex = re.compile('[^a-zA-Z–∞-—è–ê-–Ø0-9]')
    return regex.sub('', text)


menedjer = 703608663
# admin_id = '64783167'
# admin_id = '703608663'
admin_id = '314051707'


# 703608663
# 64783167

# -------------–°—Ç–∞—Ä—Ç---------------------------
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        if (message.from_user.id == menedjer):
            bot.send_message(message.chat.id, '–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç', reply_markup=keyboard.export())
            # bot.register_next_step_handler(message, rules)
        else:
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKbk5lGdRVqH3U0u8sIaxz7J8UgxkiawACZg8AAlGwsEiUHH3OCPuZqTAE")
            bot.send_message(message.chat.id, '_–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥—Ä—É–∑—å—è, –≤–ø–µ—Ä–µ–¥–∏ –º–∏—Å—Å–∏—è –ø–æ —Å–ø–∞—Å–µ–Ω–∏—é –ø–ª–∞–Ω–µ—Ç—ã, '
                                              '–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è._\n'
                                              '\n'
                                              "_–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–æ –ø–µ—Ä–µ–¥ –Ω–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ !: (–ø—Ä–∏–º–µ—Ä:_ *!–ù–∞–∑–≤–∞–Ω–∏–µ*)\n"
                             , parse_mode="Markdown", reply_markup=None)
            bot.register_next_step_handler(message, rules)
    except Exception as error:
        print(f'handle_start: {error}')
        # bot.send_message(64783167, f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª: {message.from_user.first_name}, @{message.from_user.username}')
        # bot.send_message(1248171558, f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª: {message.from_user.first_name}, @{message.from_user.username}')
        # bot.send_message(483241197, f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª: {message.from_user.first_name}, @{message.from_user.username}')


@bot.message_handler(func=lambda message: message.text.lower() == '—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', content_types=['text'])
def export(message):
    try:
        if (message.from_user.id == menedjer):
            excel_name = export_data()
            print(excel_name)
            bot.send_document(message.chat.id, InputFile(excel_name))
            os.remove(excel_name)
    except Exception as error:
        print(f'export: {error}')


@bot.message_handler(content_types=['document', 'photo', 'audio', 'video', 'animation', 'voice', 'sticker'])
def take(message):
    print(message)
    bot.delete_message(message.chat.id, message.message_id)


# -------------–ü—Ä–∞–≤–∏–ª–∞---------------------------
def rules(message):
    try:
        if message.content_type == 'text' and message.text[:1] == '!':
            info = db.Data(message.chat)
            info.create(message.text)
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKblBlGdRyqh9RVv5OcXMBzvuZMJWTJQACGxMAAlqS2EhjB6Z1XtCrlzAE")
            bot.send_message(message.chat.id,
                             "_–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º:_\n"
                             "\n"
                             "1. 1.	–ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å ! (–ü—Ä–∏–º–µ—Ä: !–æ—Ç–≤–µ—Ç). "
                             "–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –Ω–æ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å !\n"
                             "2. –í–µ–¥—É—â–∏–π –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π ¬´–ù–æ—á–∏¬ª –±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                             "–±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤ —á–∞—Ç–µ\n"
                             "3. –ü–æ—Å–ª–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —É –≤–∞—Å –±—É–¥–µ—Ç —Ä–æ–≤–Ω–æ 15 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å 3 –∑–∞–¥–∞–Ω–∏—è –¥–ª—è "
                             "—Å–ø–∞—Å–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã. –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è.\n"
                             "4. –õ—É—á—à–µ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –±—É–¥–µ—Ç 1 —á–µ–ª–æ–≤–µ–∫. –£ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö "
                             "—Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤—Å–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç–∞—Ö.\n"
                             "5. –í –∏–≥—Ä–µ –±—É–¥–µ—Ç 3 –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤–∞ –∏ 9 –∑–∞–¥–∞–Ω–∏–π –≤ –±–æ—Ç–µ\n"
                             "6. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ "
                             "–ª–∞–±–æ—Ä–∞–Ω—Ç–∞–º, –≤–µ–¥—É—â–µ–º—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É [@blacklist_event](@blacklist_event)\n"
                             "\n"
                             "_–ï—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ –≤–≤–µ–¥–∏—Ç–µ_ *!–ü–æ–≥–Ω–∞–ª–∏* _–∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É –ª–æ–∫–∞—Ü–∏–π. –û–Ω–∏ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è "
                             "–≤–∞–º –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è._\n"
                             , parse_mode="Markdown")
            bot.register_next_step_handler(message, map1)
        else:
            bot.register_next_step_handler(message, rules)
    except Exception as error:
        print(f'rules: {error}')
        bot.register_next_step_handler(message, rules)


# -------------–ö–∞—Ä—Ç–∞ 1---------------------------
def map1(message):
    try:
        if message.content_type == 'text' and message.text[:1] == '!':
            if message.text.lower() in ['!–ø–æ–≥–Ω–∞–ª–∏']:
                bot.send_photo(message.chat.id,
                               "AgACAgIAAxkBAAICxGUceSBxAwABFvH8iAvDxCJtiOa1pAACl9AxG25C4Egy8kQCEknpowEAAwIAA3kAAzAE"
                               )
                bot.register_next_step_handler(message, entrance1)
            else:
                bot.send_message(message.chat.id, '_–í–≤–µ–¥–∏—Ç–µ_ *!–ø–æ–≥–Ω–∞–ª–∏*\n'
                                 , parse_mode="Markdown")
                bot.register_next_step_handler(message, map1)
        else:
            bot.register_next_step_handler(message, map1)
    except Exception as error:
        print(f'keybor: {error}')
        bot.register_next_step_handler(message, map1)


# -------------–í—Ö–æ–¥ 1---------------------------
def entrance1(message):
    try:
        if message.content_type == 'text' and message.text[:1] == '!':
            if message.text.lower() in ['!–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å']:
                bot.send_sticker(message.chat.id,
                                 "CAACAgIAAxkBAAEKblJlGdSN-UHEvZ5EdzZEn6YTjnwEtQACYw4AAgtaoEg7Cb-9icYZzTAE")
                bot.send_message(message.chat.id, "_–°–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –µ—ë "
                                                  "–∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã!_\n",
                                 parse_mode="Markdown", reply_markup=keyboard.keyboard1(message.chat))
                start_question_at(message.chat, 'entrance1')
            else:
                bot.send_message(message.chat.id, '_–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ_\n'
                                 , parse_mode="Markdown")
                bot.register_next_step_handler(message, entrance1)
        else:
            bot.register_next_step_handler(message, entrance1)
    except Exception as error:
        print(f'entrance1: {error}')
        bot.register_next_step_handler(message, entrance1)


# -------------–∑–∞–¥–∞–Ω–∏–µ 1*---------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 1', content_types=['text'])
def question_1(message):
    try:
        if check_end_time(message.chat, 'entrance1'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKblJlGdSN-UHEvZ5EdzZEn6YTjnwEtQACYw4AAgtaoEg7Cb-9icYZzTAE")
            bot.send_message(message.chat.id,
                             '_–ö–∞–∂–µ—Ç—Å—è, —è –∑–Ω–∞—é, –≥–¥–µ –ø–æ—è–≤–∏–ª—Å—è –≤–∏—Ä—É—Å! –ï–≥–æ —Å–æ–∑–¥–∞–ª —Ç–æ—Ç —Å–∞–º—ã–π –±–µ–∑—É–º–Ω—ã–π —É—á–µ–Ω—ã–π, '
                             '–∫–æ—Ç–æ—Ä—ã–π –∂–∏–≤–µ—Ç —Å–æ –º–Ω–æ–π –ø–æ —Å–æ—Å–µ–¥—Å—Ç–≤—É! –û–Ω —Ä–µ–¥–∫–æ –≤—ã—Ö–æ–¥–∏–ª –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∞ –∫—É—Ä—å–µ—Ä—ã '
                             '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –µ–º—É —Ç–∞—Å–∫–∞–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∑–∞–∫–∞–∑—ã —Å —Ö–∏–º–∏–∫–∞—Ç–∞–º–∏. –Ø –ø—Ä–æ–±—Ä–∞–ª—Å—è –∫ –Ω–µ–º—É –≤ –∫–æ–º–Ω–∞—Ç—É '
                             '–∏ —Å–¥–µ–ª–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞. –ù–∞–¥–æ –ø–æ–Ω—è—Ç—å –∫—Ç–æ –æ–Ω, —á–µ–º –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, '
                             '—Å–æ–∑–¥–∞–≤–∞—è –≤–∏—Ä—É—Å._\n'
                             '\n'
                             '–û—Ç–≤–µ—Ç—ã –ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *!–û—Ç–≤–µ—Ç*', parse_mode="Markdown",
                             reply_markup=markup)
            bot.send_photo(message.chat.id,
                           'AgACAgIAAx0CZNgM2QADmWUbG40B6JmU7ZIAAaV-xohAtTW06gACgswxG2Ir4EghTuAQ0OKyeQEAAwIAA3kAAzAE')
            bot.send_photo(message.chat.id,
                           'AgACAgIAAx0CZNgM2QADmmUbG6WCrwLKzAwc2D33csaK3_lxAAKDzDEbYivgSAyqMUW4dZ2iAQADAgADeQADMAQ')
            bot.register_next_step_handler(message, question_1_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_1: {error}')
        bot.register_next_step_handler(message, question_1)


def question_1_end(message):
    try:
        if check_end_time(message.chat, 'entrance1'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ['!–ª–æ–ø–µ—Ä–∞–º–∏–¥']:
                    if check_answer(message.chat, 'question_answer_1', "answer_1"):
                        bot.send_message(message.chat.id,
                                         '_–ù–µ –Ω–µ –Ω–µ, –ª–æ–ø–µ—Ä–∞–º–∏–¥ —É–∂–µ –±—ã–ª_',
                                         parse_mode="Markdown")
                        bot.register_next_step_handler(message, question_1_end)
                    else:
                        change_answer(message.chat, 'question_answer_1', "answer_1")
                        if check_answer_final(message.chat, 'question_answer_1'):
                            final_question_1(message)
                        else:
                            bot.send_message(message.chat.id,
                                             "_–í–µ—Ä–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ._",
                                             parse_mode="Markdown")
                            bot.register_next_step_handler(message, question_1_end)
                elif message.text.lower() in ['!—Å—Ç—Ä–µ–ø—Ç–æ–º–∏—Ü–∏–Ω']:
                    if check_answer(message.chat, 'question_answer_1', "answer_2"):
                        bot.send_message(message.chat.id,
                                         '_–í–µ—Ä–Ω–æ, –Ω–æ –ø–æ–¥–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω_',
                                         parse_mode="Markdown")
                        bot.register_next_step_handler(message, question_1_end)
                    else:
                        change_answer(message.chat, 'question_answer_1', "answer_2")
                        if check_answer_final(message.chat, 'question_answer_1'):
                            final_question_1(message)
                        else:
                            bot.send_message(message.chat.id,
                                             "_–í–µ—Ä–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ._",
                                             parse_mode="Markdown")
                            bot.register_next_step_handler(message, question_1_end)
                elif message.text.lower() in ['!–æ–Ω —É–≤–æ–ª–µ–Ω',
                                              '!—É–≤–æ–ª–µ–Ω',
                                              '!–µ–≥–æ —É–≤–æ–ª–∏–ª–∏',
                                              '!—É–≤–æ–ª–∏–ª–∏']:
                    if check_answer(message.chat, 'question_answer_1', "answer_3"):
                        bot.send_message(message.chat.id,
                                         '_–£–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –æ–Ω —É–≤–æ–ª–µ–Ω_',
                                         parse_mode="Markdown")
                        bot.register_next_step_handler(message, question_1_end)
                    else:
                        change_answer(message.chat, 'question_answer_1', "answer_3")
                        if check_answer_final(message.chat, 'question_answer_1'):
                            final_question_1(message)
                        else:
                            bot.send_message(message.chat.id,
                                             "_–í–µ—Ä–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ._",
                                             parse_mode="Markdown")
                            bot.register_next_step_handler(message, question_1_end)
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect), parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_1_end)
            else:
                bot.register_next_step_handler(message, question_1_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_1_end: {error}')
        bot.register_next_step_handler(message, question_1_end)


def final_question_1(message):
    change(message.chat, "question_1")
    if check_final(message.chat, 1):
        map_virus(message, True)
    else:
        bot.send_message(message.chat.id,
                         '_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è._',
                         parse_mode="Markdown", reply_markup=keyboard.keyboard1(message.chat))


# -------------–∑–∞–¥–∞–Ω–∏–µ 2*---------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 2', content_types=['text'])
def question_2(message):
    try:
        if check_end_time(message.chat, 'entrance1'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKblhlGdTr3dDdyJULGEB0WO28ZDb66QACcg8AAiRaoEiI1kAytRS9zjAE")
            bot.send_message(message.chat.id,
                             '_–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ! –ß—Ç–æ —ç—Ç–æ? –ö–∞–∫–æ–µ-—Ç–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –ú–æ–∂–µ—Ç —ç—Ç–æ –∫–ª—é—á –∫ —Ç–æ–º—É,'
                             ' –∫–∞–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤–∏—Ä—É—Å?_\n'
                             '\n'
                             '–û—Ç–≤–µ—Ç –ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *!–û—Ç–≤–µ—Ç*', parse_mode="Markdown", reply_markup=markup)
            bot.send_audio(message.chat.id,
                           'CQACAgIAAxkBAAIE4mUdvdPsGQWNmLPmL1wqFu6kHh9aAAI4NAACbp_wSG9uk8ev5uMgMAQ')
            bot.register_next_step_handler(message, question_2_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_2: {error}')
        bot.register_next_step_handler(message, question_2)


def question_2_end(message):
    try:
        if check_end_time(message.chat, 'entrance1'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ["!–∫–∏—Å–ª–æ—Ä–æ–¥", "!o2", "!–æ2"]:
                    change(message.chat, "question_2")
                    if check_final(message.chat, 1):
                        map_virus(message, True)
                    else:
                        bot.send_message(message.chat.id,
                                         '_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è '
                                         '–∫ –Ω–∞—á–∞–ª—É –¥–Ω—è._'
                                         , parse_mode="Markdown", reply_markup=keyboard.keyboard1(message.chat))
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect),
                                     parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_2_end)
            else:
                bot.register_next_step_handler(message, question_2_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_2_end: {error}')
        bot.register_next_step_handler(message, question_2_end)


# -------------–∑–∞–¥–∞–Ω–∏–µ 3---------------------------

@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 3', content_types=['text'])
def question_3(message):
    try:
        if check_end_time(message.chat, 'entrance1'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKblplGdUGFTsIE3Q-1OKY2du7cnIEfwACWg4AAsQNmUiGtb3-255fDTAE")
            bot.send_message(message.chat.id,
                             '_–°–µ–π—á–∞—Å –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã—è—Å–Ω–∏—Ç—å –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–∞–≤–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞. '
                             '–ü–æ—Ö–æ–∂–µ, –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ —Ä–∞—Å—á–µ—Ç—ã, –¥–∞–∂–µ –∑–∞–ø–∏—Å–∫—É —Å –Ω–∏–º–∏ –æ—Å—Ç–∞–≤–∏–ª–∏. '
                             '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∑–∞–ø–∏—Å–∫–æ–π –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ä–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã._\n'
                             '\n'
                             '–û—Ç–≤–µ—Ç –ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *!–û—Ç–≤–µ—Ç*', parse_mode="Markdown", reply_markup=markup)
            bot.send_photo(message.chat.id,
                           'AgACAgIAAxkBAAMOZRsnuV0F9x_VOb1f8yPGB6GevBAAAsPKMRuYE9hIowF1e2rbhO0BAAMCAAN5AAMwBA')
            bot.register_next_step_handler(message, question_3_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_3: {error}')
        bot.register_next_step_handler(message, question_3)


def question_3_end(message):
    try:
        if check_end_time(message.chat, 'entrance1'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ["!—Ç—Ä–∏ –∫–≤–∞—Ä—Ç–∞–ª–∞", "!—Ç—Ä–∏–∫–≤–∞—Ä—Ç–∞–ª–∞", "!3 –∫–≤–∞—Ä—Ç–∞–ª–∞", "!3–∫–≤–∞—Ä—Ç–∞–ª–∞"]:
                    change(message.chat, "question_3")
                    if check_final(message.chat, 1):
                        map_virus(message, True)
                    else:
                        bot.send_message(message.chat.id,
                                         '_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ—Ö–æ–∂–µ, –≤–∏—Ä—É—Å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —É–∂–µ 9 –º–µ—Å—è—Ü–µ–≤, '
                                         '—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ —Å–ø–∞—Å–µ–Ω–∏–∏ –ø–ª–∞–Ω–µ—Ç—ã. –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ '
                                         '–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è._'
                                         , parse_mode="Markdown", reply_markup=keyboard.keyboard1(message.chat))
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect),
                                     parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_3_end)
            else:
                bot.register_next_step_handler(message, question_3_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_3_end: {error}')
        bot.register_next_step_handler(message, question_3_end)


# -------------–í—Ö–æ–¥ 2---------------------------

@bot.message_handler(func=lambda message: message.text.lower() == '!–∏–∑–æ–ª—è—Ü–∏—è', content_types=['text'])
def entrance2(message):
    try:
        if check_final(message.chat, 2):
            bot.send_message(message.chat.id, '_–í—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –±–ª–æ–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, '
                                              '–∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∑–≤–∞–ª –≤–µ–¥—É—â–∏–π _\n', parse_mode="Markdown")
        else:
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ['!–∏–∑–æ–ª—è—Ü–∏—è']:
                    bot.send_sticker(message.chat.id,
                                     "CAACAgIAAxkBAAEKblxlGdUewRG6zqFeFZax9SYN23YWKQACaA0AArShoUgeWJn3yocDQTAE")
                    bot.send_message(message.chat.id, "_–°–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ "
                                                      "–µ—ë –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã!_\n",
                                     parse_mode="Markdown", reply_markup=keyboard.keyboard2(message.chat))
                    start_question_at(message.chat, 'entrance2')
                else:
                    bot.send_message(message.chat.id, '_–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ_\n'
                                     , parse_mode="Markdown")
                    bot.register_next_step_handler(message, entrance2)
            else:
                bot.register_next_step_handler(message, entrance2)
    except Exception as error:
        print(f'entrance2: {error}')
        bot.register_next_step_handler(message, entrance2)


# -------------–∑–∞–¥–∞–Ω–∏–µ 4---------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 4', content_types=['text'])
def question_4(message):
    try:
        if check_end_time(message.chat, 'entrance2'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKca5lHHJs6ylyf2Bc8EuRz4XWn1Bi2QACYw4AAgtaoEg7Cb-9icYZzTAE")
            bot.send_message(message.chat.id,
                             '_–•–∏–º–∏—è ‚Äì –ø–æ–º–æ—â–Ω–∏–∫ –ª—é–±–æ–≥–æ —É—á–µ–Ω–æ–≥–æ, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞. –ê —Å–º–µ—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ ‚Äì '
                             '–ø—Ä–æ—Å—Ç–µ–π—à–∞—è —Ö–∏–º–∏—è. –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ—Ç —Ö–∏–º–∏–∫ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª –∞–Ω—Ç–∏–¥–æ—Ç –¥–ª—è –±–æ–ª–µ–∑–Ω–µ–π –∂–µ–ª—É–¥–∫–∞, '
                             '–Ω–æ —á—Ç–æ —Ç—É—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ? –ú–æ–∂–µ—Ç, –≤–∞–º –¥–∞–∂–µ —á–µ–º-—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ü–≤–µ—Ç –µ–≥–æ –±–ª–æ–∫–Ω–æ—Ç–∞._\n'
                             '\n'
                             '–û—Ç–≤–µ—Ç –ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *!–û—Ç–≤–µ—Ç*', parse_mode="Markdown", reply_markup=markup)
            bot.send_photo(message.chat.id,
                           'AgACAgIAAxkBAAMPZRsyzFk271jf-zpzfMkVj6BxEQYAAtLKMRuYE9hIOVA7c0qVMzMBAAMCAAN5AAMwBA')
            bot.register_next_step_handler(message, question_4_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_4: {error}')
        bot.register_next_step_handler(message, question_4)


def question_4_end(message):
    try:
        if check_end_time(message.chat, 'entrance2'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ["!–≥—Ä–µ–ª–∏–Ω"]:
                    change(message.chat, "question_4")
                    if check_final(message.chat, 2):
                        map_virus(message, True)
                    else:
                        bot.send_message(message.chat.id,
                                         '_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í–æ–∑–º–æ–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –≥–æ—Ä–º–æ–Ω –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å '
                                         '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ. –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è._'
                                         , parse_mode="Markdown", reply_markup=keyboard.keyboard2(message.chat))
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect),
                                     parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_4_end)
            else:
                bot.register_next_step_handler(message, question_4_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_4_end: {error}')
        bot.register_next_step_handler(message, question_4_end)


# -------------–∑–∞–¥–∞–Ω–∏–µ 5---------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 5', content_types=['text'])
def question_5(message):
    try:
        if check_end_time(message.chat, 'entrance2'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKcHZlGzJbXZujDo1EpShuaDl2E8f-cwACrQ4AAuR6QUt_BjUr8hmSxjAE")
            bot.send_message(message.chat.id,
                             '_–ü–æ—Ö–æ–∂–µ, –Ω–∞—à–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—à–ª–∏ —Å—Ç–∞—Ä—É—é —Ö–∏–∂–∏–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å '
                             '–∫–∞–∫–∏–µ-—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –Ω–∞–¥ –∂–∏–≤–æ—Ç–Ω—ã–º–∏. –ò–∑—É—á–∏—Ç–µ –µ–µ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —ç—Ç–æ '
                             '–¥–æ–ª–∂–Ω–æ –ø–æ–º–æ—á—å –≤ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –±–æ–ª–µ–∑–Ω—å—é._\n'
                             '\n'
                             '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ. –û—Ç–≤–µ—Ç –ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *!–û—Ç–≤–µ—Ç*', parse_mode="Markdown",
                             reply_markup=markup)
            bot.send_message(message.chat.id, 'https://tinyurl.com/ydb9qczv', disable_web_page_preview=True)
            bot.send_photo(message.chat.id,
                           'AgACAgIAAxkBAAICVWUcckoJ_RAeIyOYsUUNL8u-B2YEAAJ40DEbbkLgSDCi5MWh3Bw6AQADAgADeQADMAQ')
            bot.register_next_step_handler(message, question_5_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_5: {error}')
        bot.register_next_step_handler(message, question_5)


def question_5_end(message):
    try:
        if check_end_time(message.chat, 'entrance2'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ['!–ø–∏–Ω–≥–≤–∏–Ω', '!–ø–∏–Ω–≥–≤–∏–Ω–∞']:
                    if check_answer(message.chat, 'question_answer_2', "answer_1"):
                        bot.send_message(message.chat.id,
                                         '_–ù–µ –Ω–µ –Ω–µ, –ø–∏–Ω–≥–≤–∏–Ω —É–∂–µ –±—ã–ª_',
                                         parse_mode="Markdown")
                        bot.register_next_step_handler(message, question_5_end)
                    else:
                        change_answer(message.chat, 'question_answer_2', "answer_1")
                        if check_answer_final(message.chat, 'question_answer_2'):
                            final_question_2(message)
                        else:
                            bot.send_message(message.chat.id,
                                             "_–í–µ—Ä–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ._",
                                             parse_mode="Markdown")
                            bot.register_next_step_handler(message, question_5_end)
                elif message.text.lower() in ["!–µ–Ω—Ç–µ—Ä", "!—ç–Ω—Ç–µ—Ä", "!enter","!enter at own risk"]:
                    if check_answer(message.chat, 'question_answer_2', "answer_2"):
                        bot.send_message(message.chat.id,
                                         '_–í–µ—Ä–Ω–æ, –Ω–æ –ø–æ–¥–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω_',
                                         parse_mode="Markdown")
                        bot.register_next_step_handler(message, question_5_end)
                    else:
                        change_answer(message.chat, 'question_answer_2', "answer_2")
                        if check_answer_final(message.chat, 'question_answer_2'):
                            final_question_2(message)
                        else:
                            bot.send_message(message.chat.id,
                                             "_–í–µ—Ä–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ._",
                                             parse_mode="Markdown")
                            bot.register_next_step_handler(message, question_5_end)
                elif message.text.lower() in ["!–æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å", "!–æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª–∏"]:
                    if check_answer(message.chat, 'question_answer_2', "answer_3"):
                        bot.send_message(message.chat.id,
                                         '_–í–µ—Ä–Ω–æ, –Ω–æ –ø–æ–¥–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω_',
                                         parse_mode="Markdown")
                        bot.register_next_step_handler(message, question_5_end)
                    else:

                        change_answer(message.chat, 'question_answer_2', "answer_3")
                        if check_answer_final(message.chat, 'question_answer_2'):
                            final_question_2(message)
                        else:
                            bot.send_message(message.chat.id,
                                             "_–í–µ—Ä–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ._",
                                             parse_mode="Markdown")
                            bot.register_next_step_handler(message, question_5_end)
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect), parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_5_end)
            else:
                bot.register_next_step_handler(message, question_5_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_5_end: {error}')
        bot.register_next_step_handler(message, question_5_end)


def final_question_2(message):
    change(message.chat, "question_5")
    if check_final(message.chat, 2):
        map_virus(message, True)
    else:
        bot.send_message(message.chat.id,
                         '_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è._',
                         parse_mode="Markdown", reply_markup=keyboard.keyboard2(message.chat))


# -------------–∑–∞–¥–∞–Ω–∏–µ 6---------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 6', content_types=['text'])
def question_6(message):
    try:
        if check_end_time(message.chat, 'entrance2'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKbmNlGdV4jvO1gdlP7ZGQ8bLkAstpdQACxQ4AAoxEmUgDii518Wg0ezAE")
            bot.send_message(message.chat.id,
                             '_–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –Ω–µ –º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –æ–ë—ã—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏. '
                             '–Ω–æ –æ–Ω–∏ –ø–†–∏–¥—É–º–∞–ª–∏ –¥—Ä—É–≥–æ–π, –∫–ê–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–∞–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–ò—è —Å –ø–æ–º–æ—â—å—é —Å–≤–µ—Ç–∞. '
                             '–≤–Ω–∏–º–∞—Ç–µ–õ—å–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ –∏ –ø–æ–π–º–∏—Ç–µ, —á—Ç–æ –æ–Ω–∏ –ø—ã—Ç–∞—é—Ç—Å—è –Ω–∞–º —Å–∫–∞–∑–∞—Ç–¨._\n'
                             '\n'
                             '–û—Ç–≤–µ—Ç –ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *!–û—Ç–≤–µ—Ç*', parse_mode="Markdown",
                             reply_markup=markup)
            bot.send_video(message.chat.id,
                           'BAACAgIAAxkBAAMRZRs23qZP7ny-aUxol75C4Fd6JrEAAhgzAAKYE9hIBqahMmaROqAwBA')
            bot.register_next_step_handler(message, question_6_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_6: {error}')
        bot.register_next_step_handler(message, question_6)


def question_6_end(message):
    try:
        if check_end_time(message.chat, 'entrance2'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ["!—Å–ø–∞—Å–∏–±–æ"]:
                    change(message.chat, "question_6")
                    if check_final(message.chat, 2):
                        map_virus(message, True)
                    else:
                        bot.send_message(message.chat.id,
                                         '_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç —Ä–∞–π–æ–Ω —É–∂–µ —Å–ø–∞—Å–ª–∏, –∏ –æ–Ω–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è—Ç –≤–∞—Å!'
                                         ' –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è._'
                                         , parse_mode="Markdown", reply_markup=keyboard.keyboard2(message.chat))
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect),
                                     parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_6_end)
            else:
                bot.register_next_step_handler(message, question_6_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_6_end: {error}')
        bot.register_next_step_handler(message, question_6_end)


# -------------–í—Ö–æ–¥ 3---------------------------

@bot.message_handler(func=lambda message: message.text.lower() == '!–∞–Ω—Ç–∏–≤–∏—Ä—É—Å', content_types=['text'])
def entrance3(message):
    try:
        if message.content_type == 'text' and message.text[:1] == '!':
            if check_final(message.chat, 3):
                bot.send_message(message.chat.id, '_–í—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –±–ª–æ–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, '
                                                  '–∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∑–≤–∞–ª –≤–µ–¥—É—â–∏–π _\n', parse_mode="Markdown")
            else:
                if message.text.lower() in ['!–∞–Ω—Ç–∏–≤–∏—Ä—É—Å']:
                    bot.send_sticker(message.chat.id,
                                     "CAACAgIAAxkBAAEKbmdlGdWOA__HQsInmtWk_e7wd4IyBQACtA4AAgvSoEigkT622AoTTTAE")
                    bot.send_message(message.chat.id, "_–°–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ "
                                                      "–µ—ë –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã!_\n",
                                     parse_mode="Markdown", reply_markup=keyboard.keyboard3(message.chat))
                    start_question_at(message.chat, 'entrance3')
                else:
                    bot.send_message(message.chat.id, '_–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ_\n'
                                     , parse_mode="Markdown")
                    bot.register_next_step_handler(message, entrance3)
        else:
            bot.register_next_step_handler(message, entrance3)
    except Exception as error:
        print(f'entrance3: {error}')
        bot.register_next_step_handler(message, entrance3)


# -------------–∑–∞–¥–∞–Ω–∏–µ 7*---------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 7', content_types=['text'])
def question_7(message):
    try:
        if check_end_time(message.chat, 'entrance3'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKbmdlGdWOA__HQsInmtWk_e7wd4IyBQACtA4AAgvSoEigkT622AoTTTAE")
            bot.send_message(message.chat.id,
                             '_–ü–æ—Å–ª–µ –±–æ–ª–µ–∑–Ω–∏ —É –º–Ω–æ–≥–∏—Ö –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–≤–∞–ª—ã –≤ –ø–∞–º—è—Ç–∏, –Ω–æ –Ω–∏—á–µ–≥–æ, –º—ã –≥–æ—Ç–æ–≤—ã –∏–º –ø–æ–º–æ—á—å '
                             '–ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ. –°–µ–π—á–∞—Å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —á—Ç–æ-—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,'
                             ' –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ._\n'
                             '\n'
                             '–û—Ç–≤–µ—Ç –ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *!–û—Ç–≤–µ—Ç*', parse_mode="Markdown", reply_markup=markup)
            bot.send_photo(message.chat.id,
                           'AgACAgIAAxkBAAMSZRs6QWkgbzJVYQlUAj4t0gRmxmIAAurKMRuYE9hIielVsagQW1kBAAMCAAN5AAMwBA')
            bot.register_next_step_handler(message, question_7_1)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_7: {error}')
        bot.register_next_step_handler(message, question_7)


def question_7_1(message):
    try:
        if check_end_time(message.chat, 'entrance3'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ["!—Å–≤–∏—Ç–æ–∫", "!–∑–æ–ª–æ—Ç–æ–π —Å–≤–∏—Ç–æ–∫"]:
                    if check_final(message.chat, 3):
                        map_virus(message, True)
                    else:
                        bot.send_photo(message.chat.id,
                                       'AgACAgIAAxkBAAMTZRs7B3dsViXK0sK_IKzIBqRAAAHQAALsyjEbmBPYSLhl6UoAAe4RWQEAAwIAA3kAAzAE',
                                       caption='_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!_'
                                       , parse_mode="Markdown")
                        bot.send_message(message.chat.id, "_–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ –∑–¥–µ—Å—å._",
                                         parse_mode="Markdown")
                        bot.send_photo(message.chat.id,
                                       'AgACAgIAAxkBAAMUZRs7a5fYXcOeWObKsM5shhiKffUAAu7KMRuYE9hINSEGPq0r8PMBAAMCAAN5AAMwBA')
                    bot.register_next_step_handler(message, question_7_2)
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect),
                                     parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_7_1)
            else:
                bot.register_next_step_handler(message, question_7_1)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_7_1: {error}')
        bot.register_next_step_handler(message, question_7_1)


def question_7_2(message):
    try:
        if check_end_time(message.chat, 'entrance3'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ["!–º–æ–Ω–∞ –ª–∏–∑–∞", "!–∫–∞—Ä—Ç–∏–Ω–∞ –º–æ–Ω–∞ –ª–∏–∑–∞", "!–¥–∂–∞–∫–æ–Ω–¥–∞",
                                            "!–∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–∂–∞–∫–æ–Ω–¥—ã", "!–∫–∞—Ä—Ç–∏–Ω–∞ –º–æ–Ω—ã –ª–∏–∑—ã"]:
                    if check_final(message.chat, 3):
                        map_virus(message, True)
                    else:
                        bot.send_photo(message.chat.id,
                                       'AgACAgIAAxkBAAMWZRs771O7OqewdA0u3_ThIYdE2hwAAu_KMRuYE9hIr0ysoyPXAdUBAAMCAAN5AAMwBA',
                                       caption='_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!_'
                                       , parse_mode="Markdown")
                        bot.send_message(message.chat.id, "_–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ –∑–¥–µ—Å—å._",
                                         parse_mode="Markdown")
                        bot.send_photo(message.chat.id,
                                       'AgACAgIAAxkBAAMXZRs8If47YHu-Wq5Zdr-I1lcORukAAvDKMRuYE9hIFHSe_ab9XFwBAAMCAAN5AAMwBA')
                    bot.register_next_step_handler(message, question_7_3)
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect),
                                     parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_7_2)
            else:
                bot.register_next_step_handler(message, question_7_2)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_7_2: {error}')
        bot.register_next_step_handler(message, question_7_2)


def question_7_3(message):
    try:
        if check_end_time(message.chat, 'entrance3'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ["!—Å—Ç–∞—Ç—É—è", "!—Å—Ç–∞—Ç—É—è –∏–∏—Å—É—Å–∞", "!—Å—Ç–∞—Ç—É—è –∏–∏—Å—É—Å—É", "!–∏–∏—Å—É—Å", "!–ø–∞–º—è—Ç–Ω–∏–∫",
                                            "!–ø–∞–º—è—Ç–Ω–∏–∫ –∏–∏—Å—É—Å—É", "!–ø–∞–º—è—Ç–Ω–∏–∫ –∏–∏—Å—É—Å–∞", "!—Å—Ç–∞—Ç—É—è —Ö—Ä–∏—Å—Ç–∞",
                                            "!–ø–∞–º—è—Ç–Ω–∏–∫ —Ö—Ä–∏—Å—Ç—É", "!—Ö—Ä–∏—Å—Ç–æ—Å"]:
                    change(message.chat, "question_7")
                    if check_final(message.chat, 3):
                        bot.send_photo(message.chat.id,
                                       'AgACAgIAAxkBAAICEWUcIkzz7JYTC3gAAdu1K_ZM2rToHgACus4xG25C4EhknPFmR48z7gEAAwIAA3kAAzAE',
                                       caption='_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!_'
                                       , parse_mode="Markdown")
                        end(message, True)
                    else:
                        bot.send_photo(message.chat.id,
                                       'AgACAgIAAxkBAAICEWUcIkzz7JYTC3gAAdu1K_ZM2rToHgACus4xG25C4EhknPFmR48z7gEAAwIAA3kAAzAE',
                                       caption='_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è._'
                                       , parse_mode="Markdown", reply_markup=keyboard.keyboard3(message.chat))
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect),
                                     parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_7_3)
            else:
                bot.register_next_step_handler(message, question_7_3)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_7_3: {error}')
        bot.register_next_step_handler(message, question_7_3)


# -------------–∑–∞–¥–∞–Ω–∏–µ 8*---------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 8', content_types=['text'])
def question_8(message):
    try:
        if check_end_time(message.chat, 'entrance3'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKbmtlGdXYm0HqrFgex3v6lzBXG1IJEgACyw0AAjR_oEiWR2jcYJrkpjAE")
            bot.send_message(message.chat.id,
                             '_–ö–∞–∂–µ—Ç—Å—è, –º—ã –Ω–∞—à–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–≥ –ø–æ —Ç–æ–º—É, –∫–∞–∫ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–∏—Ä—É—Å. '
                             '–û–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Å–ª–æ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—Å–µ–≥–æ –ª–∏—à—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–∞ '
                             '–≤ —ç—Ç–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ –∏–∑ –±—É–∫–≤ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å,—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∏–∑ –Ω–∏—Ö. –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, '
                             '–∫–∞–∫ —Å–ª–æ–≤–∞ —Ç–∞–º –∑–∞–ø–∏—Å–∞–Ω—ã —Ç–æ–∂–µ –ø–æ–∫–∞–∂–µ–º._\n'
                             '\n'
                             '–û—Ç–≤–µ—Ç –ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *!–û—Ç–≤–µ—Ç*', parse_mode="Markdown", reply_markup=markup)
            bot.send_photo(message.chat.id,
                           'AgACAgIAAxkBAAIE4GUdvZXTMi-WwQR6yrGYrcGo6WiUAAKczzEbbp_wSELwc5VMnKdCAQADAgADeQADMAQ')
            bot.send_photo(message.chat.id,
                           'AgACAgIAAxkBAAIE4WUdvadOQWc_4lzLgTODasdK668XAAKezzEbbp_wSNZo2qdU4KTdAQADAgADeQADMAQ')
            bot.register_next_step_handler(message, question_8_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_8: {error}')
        bot.register_next_step_handler(message, question_8)


def question_8_end(message):
    try:
        if check_end_time(message.chat, 'entrance3'):
            if message.content_type == 'text' and message.text[:1] == '!':
                if message.text.lower() in ["!–∫–∏—à–µ—á–Ω–∞—è –ø–∞–ª–æ—á–∫–∞", "!–∫–∏—à–µ—á–Ω–∞—è–ø–∞–ª–æ—á–∫–∞"]:
                    change(message.chat, "question_8")
                    if check_final(message.chat, 3):
                        map_virus(message, True)
                    else:
                        bot.send_message(message.chat.id,
                                         '_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ '
                                         '–∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è_'
                                         , parse_mode="Markdown", reply_markup=keyboard.keyboard3(message.chat))
                else:
                    bot.send_chat_action(message.chat.id, 'typing')
                    bot.send_message(message.chat.id, random.choice(incorrect),
                                     parse_mode="Markdown")
                    bot.register_next_step_handler(message, question_8_end)
            else:
                bot.register_next_step_handler(message, question_8_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_8_end: {error}')
        bot.register_next_step_handler(message, question_8_end)


# -------------–∑–∞–¥–∞–Ω–∏–µ 9*---------------------------
photo = [
    'AgACAgIAAxkBAAMbZRs_UrnDSb6-4p9xqa-hKnL5C4kAAvXKMRuYE9hImm_eEIRlufUBAAMCAAN5AAMwBA',
    'AgACAgIAAxkBAAMcZRs_YebDtodiKA7tzGQkLk6poCgAAvbKMRuYE9hIY8TnngkYzC8BAAMCAAN5AAMwBA',
    'AgACAgIAAxkBAAMdZRs_cryQWHtJpXT62c6D47lwrUAAAvfKMRuYE9hIYpAD2a5Nx40BAAMCAAN5AAMwBA',
    'AgACAgIAAxkBAAMeZRs_fqavGwxc6F_FcaAlxMumJFYAAvjKMRuYE9hI5YygWuAF_6gBAAMCAAN5AAMwBA'
]


@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–¥–∞–Ω–∏–µ 9', content_types=['text'])
def question_9(message):
    print(message)
    try:
        if check_end_time(message.chat, 'entrance3'):
            markup = telebot.types.ReplyKeyboardRemove()
            bot.send_sticker(message.chat.id,
                             "CAACAgIAAxkBAAEKbmtlGdXYm0HqrFgex3v6lzBXG1IJEgACyw0AAjR_oEiWR2jcYJrkpjAE")
            bot.send_message(message.chat.id,
                             '_–ú—ã —Ö–æ—Ç–∏–º –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞—à–∏—Ö —Å–ø–∞—Å–∏—Ç–µ–ª–µ–π, –ø–æ—ç—Ç–æ–º—É —Å–¥–µ–ª–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é'
                             ' –Ω–∞ –ø–∞–º—è—Ç—å, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ –∞—Ä—Ö–∏–≤–∞—Ö –Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã. –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º,'
                             ' –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–∞—à–µ —Ñ–æ—Ç–æ –±—ã–ª–æ –ø–æ—Ö–æ–∂–µ, –∏–Ω–∞—á–µ –Ω–µ –ø—Ä–∏–º–µ–º._\n', parse_mode="Markdown",
                             reply_markup=markup)
            bot.send_photo(message.chat.id,
                           random.choice(photo))
            bot.register_next_step_handler(message, question_9_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_9: {error}')
        bot.register_next_step_handler(message, question_9)


def question_9_end(message):
    try:
        if check_end_time(message.chat, 'entrance3'):
            if message.content_type == 'photo':
                keyboard_inline = types.InlineKeyboardMarkup()
                confirm_button = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'confirm')
                cancel_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
                keyboard_inline.row(confirm_button, cancel_button)
                bot.send_photo(admin_id, message.photo[-1].file_id,
                               caption=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è "{message.chat.title}".\n'
                                       f'\n'
                                       f'–ó–∞–¥–∞–Ω–∏–µ 9:\n'
                                       f'\n'
                                       f'[ {message.chat} ]\n',
                               reply_markup=keyboard_inline)

                @bot.callback_query_handler(func=lambda call: True)
                def callback_handler(call):
                    text = call.message.caption
                    match = re.search(r'\[(.*?)\]', text)
                    text = match.group(1).replace("'", "\"")
                    text_end = text.replace("None", "null")
                    value = json.loads(text_end)
                    chat = types.Chat.de_json(value)
                    if call.data == 'confirm':
                        change(chat, 'question_9')
                        bot.send_message(call.from_user.id, f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —É \"{chat.title}\"')
                        if check_final(chat, 3):
                            markup = telebot.types.ReplyKeyboardRemove()
                            bot.send_sticker(chat.id,
                                             "CAACAgIAAxkBAAEKbkxlGdO6slpcsB9jOt2Ge6m2cZVuywACaA0AArShoUgeWJn3yocDQTAE")
                            bot.send_message(chat.id,
                                             '_–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏  —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! '
                                             '–û—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–Ω–µ—Å–ª–∞ –±–æ–ª—å—à–∏–π –≤–∫–ª–∞–¥, '
                                             '–∞ –ø–æ–∫–∞ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ._\n',
                                             parse_mode="Markdown", reply_markup=markup)
                        else:
                            bot.send_message(chat.id,
                                             '_–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è'
                                             ' –∫ –Ω–∞—á–∞–ª—É –¥–Ω—è_',
                                             parse_mode="Markdown",
                                             reply_markup=keyboard.keyboard3(chat))
                    elif call.data == 'cancel':
                        bot.send_message(chat.id, '–•–º.. –¥–∞—é –µ—â—ë —à–∞–Ω—Å üòä')
                        bot.send_message(call.from_user.id, f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ —É \"{chat.title}\"')
                        data = {
                            "message_id": 1,
                            "from": {
                                "id": 703608663,
                                "is_bot": False,
                                "first_name": "Dmitriy",
                                "username": "Lis_Di",
                                "last_name": "None",
                                "language_code": "ru",
                                "can_join_groups": "None",
                                "can_read_all_group_messages": "None",
                                "supports_inline_queries": "None",
                                "is_premium": "None",
                                "added_to_attachment_menu": "None"
                            },
                            "chat": {
                                "id": chat.id,
                                "type": chat.type,
                                "title": chat.title
                            },
                            "date": 1694822792,
                            "text": "–°—Ç–∞–ª"
                        }

                        json_data = json.dumps(data, indent=3, ensure_ascii=False)

                        fake_message = types.Message(message_id=1, date=1234567890, chat=chat,
                                                     from_user=message.from_user,
                                                     content_type="text", options=[], json_string=json_data)
                        print(fake_message)
                        bot.register_next_step_handler(fake_message, question_9_end)
            else:
                bot.send_chat_action(message.chat.id, 'typing')
                bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ\n',
                                 parse_mode="Markdown")
                bot.register_next_step_handler(message, question_9_end)
        else:
            map_virus(message, False)
    except Exception as error:
        print(f'question_9_end: {error}')
        bot.register_next_step_handler(message, question_9_end)


# -------------–ö–æ–Ω–µ—Ü---------------------------
def end(message, flag):
    if flag:
        markup = telebot.types.ReplyKeyboardRemove()
        bot.send_sticker(message.chat.id,
                         "CAACAgIAAxkBAAEKbkxlGdO6slpcsB9jOt2Ge6m2cZVuywACaA0AArShoUgeWJn3yocDQTAE")
        bot.send_message(message.chat.id, '_–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏  —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! '
                                          '–û—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–Ω–µ—Å–ª–∞ –±–æ–ª—å—à–∏–π –≤–∫–ª–∞–¥, –∞ –ø–æ–∫–∞ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ._\n',
                         parse_mode="Markdown", reply_markup=markup)
    else:
        markup = telebot.types.ReplyKeyboardRemove()
        bot.send_sticker(message.chat.id,
                         "CAACAgIAAxkBAAEKbkxlGdO6slpcsB9jOt2Ge6m2cZVuywACaA0AArShoUgeWJn3yocDQTAE")
        bot.send_message(message.chat.id,
                         '_–î–∞–∂–µ–Ω –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã—à–ª–æ –≤—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏  —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! '
                         '–û—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–Ω–µ—Å–ª–∞ –±–æ–ª—å—à–∏–π –≤–∫–ª–∞–¥, –∞ –ø–æ–∫–∞ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ._\n',
                         parse_mode="Markdown", reply_markup=markup)
    # bot.register_next_step_handler(message, end)


# -------------–ö–∞—Ä—Ç–∞---------------------------
def map_virus(message, flag):
    markup = telebot.types.ReplyKeyboardRemove()
    if flag:
        bot.send_message(message.chat.id, '–í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤–µ–¥—É—â–µ–≥–æ',
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤–µ–¥—É—â–µ–≥–æ',
                         reply_markup=markup)


def start_question_at(chat_data, name_colum):
    database = db.Data(chat_data)
    database.start_entrance_at(f'start_{name_colum}')


def check_end_time(chat_data, column_name):
    column_name = f'start_{column_name}'
    database = db.Data(chat_data)
    time_start_tuple = database.check_end_time(column_name)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ—Ä—Ç–µ–∂ –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '%H:%M:%S'
    time_start_str = time_start_tuple.strftime('%H:%M:%S')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –µ–≥–æ –∫ —Ñ–æ—Ä–º–∞—Ç—É '%H:%M:%S'
    now_str = datetime.now().strftime('%H:%M:%S')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    start_time = datetime.strptime(time_start_str, '%H:%M:%S').time()
    now = datetime.strptime(now_str, '%H:%M:%S').time()

    # –í—ã—á–∏—Å–ª—è–µ–º end_time –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–ª—é—Å 15 –º–∏–Ω—É—Ç
    end_time = (datetime.combine(datetime.today(), start_time) + timedelta(minutes=15)).time()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É start_time –∏ end_time
    if start_time <= now <= end_time:
        return True
    else:
        return False


def change(user_data, name_colum):
    database = db.Data(user_data)
    database.replace(name_colum)


def check_final(chat_data, block=0):
    database = db.Data(chat_data)
    number = database.check_final(block)
    if all(number):
        return True
    else:
        return False


def change_answer(user_data, table_name, name_colum):
    database = db.Data(user_data)
    database.replace_answer(table_name, name_colum)


def check_answer_final(chat_data, table_name):
    database = db.Data(chat_data)
    number = database.check_answer_final(table_name)
    if all(number):
        return True
    else:
        return False


def check_answer(chat_data, table_name, name_colum):
    database = db.Data(chat_data)
    answer_bool = database.response_answer(table_name, name_colum)
    if answer_bool[0]:
        return True
    else:
        return False


def get_count(chat_data):
    database = db.Data(chat_data)
    answer = database.get_count()
    return answer


# -------------------------------------------------

while True:
    try:
        bot.polling(none_stop=True, timeout=5)
    except Exception as error:
        print(error)
        time.sleep(3)
